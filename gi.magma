// To compute (n+1)P we can see it as nP + P
// If we write P = ( \psi_1(1)X : 1 : f(\psi_1(1)X) ) and nP = ( \Sum \psi_i(n)X : 1 : f(\sum \psi_i(n)) )
// we can derive the formula for \psi_i(n+1) in terms of \psi_j(n) for j <= i
// We then write \psi_i(n+1) = \psi_i(n) + g_i(n) and determine g_i(n), very important

k := 7; // nilpotence degree of eps

// =============
//    Code
// =============
load "utils.magma";

// psi0 is \psi_1(1), while psi(i) is \psi_i(n)
R<a1, a2, a3, a4, a6, X, Z, n, psi0, psi1, psi2, psi3, psi4, psi5, psi6, psi7> := PolynomialRing(Integers(), 19);
I := ideal<R | X^k, Z^k>;
Rk := R/I;

// Compute F such that for a generic point in \pi^{-1}(0) it holds Z = F(X)
right_side := -a1*X*Z - a3*Z^2 + X^3 + a2*X^2*Z + a4*X*Z^2 + a6*Z^3;
right_side := Rk!right_side;
F := right_side;
cnt := 0;

while true do 
	cnt +:= 1;
	F2 := Evaluate(F, Z, right_side);
	if F2 eq F then break; end if;
	F := F2;
end while; 

X := Rk!X;
//psi0 := Rk!psi0;
psi0 := Rk!1;
psi1 := Rk!psi1;
psi2 := Rk!psi2;
psi3 := Rk!psi3;
psi4 := Rk!psi4;
psi5 := Rk!psi5;
psi6 := Rk!psi6;

X1 := psi0*X;
P1 := [X1, Rk!1, Evaluate(F, X, X1)];

Xn := psi1*X + psi2*X^2 + psi3*X^3 + psi4*X^4 + psi5*X^5 + psi6*X^6;
Pn := [Xn, Rk!1, Evaluate(F, X, Xn)];

Q := formalAdd(P1, Pn);
Q;

for i in [1..7] do
	printf "psi_%o ==> %o\n", i, Coefficient(Q[1], X, i);
	printf "g_%o ==> %o\n", i, Coefficient(Q[1], X, i)-Rk.(i+9);
	print "================\n==============\n============\n";
end for;